import java.util.*;

public class ThreeSum {
    public static void main(String[] args) {
        int[] arr = {-1, 0, 1, 2, -1, -4};
        int n = arr.length;
        System.out.println(helperBruteforce(arr, n));
        System.out.println(hashing(arr,n));
        Arrays.sort(arr);
        System.out.println(helper(arr,n));
    }


    public static List<List<Integer>> helperBruteforce(int[] arr, int n) {
        Set<List<Integer>> set = new HashSet<>();


        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (arr[i] + arr[j] + arr[k] == 0) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(arr[i]);
                        temp.add(arr[j]);
                        temp.add(arr[k]);
                        Collections.sort(temp);
                        set.add(temp);
                    }
                }
            }
        }

        List<List<Integer>> result = new ArrayList<>(set);
        return result;
    }

//hashing
public static List<List<Integer>> hashing(int[] nums, int n) {
    Set<List<Integer>> resultSet = new HashSet<>();

    for (int i = 0; i < n - 1; i++) {
        Set<Integer> set = new HashSet<>();
        for (int j = i + 1; j < n; j++) {
            int thirdElem = -(nums[i] + nums[j]);
            if (set.contains(thirdElem)) {
                List<Integer> triplet = new ArrayList<>();
                triplet.add(nums[i]);
                triplet.add(nums[j]);
                triplet.add(thirdElem);
                triplet.sort(Integer::compareTo);
                resultSet.add(triplet);
            } else {
                set.add(nums[j]);
            }
        }
    }

    return new ArrayList<>(resultSet);
}
//optimal approach

    public static ArrayList<List<Integer>> helper(int[] arr, int n) {
        ArrayList<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i > 0 && arr[i] == arr[i - 1]) {
                continue;
            }
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);
                    ans.add(temp);
                    // Skip duplicates for j and k
                    while (j < k && arr[j] == arr[j + 1]) j++;
                    while (j < k && arr[k] == arr[k - 1]) k--;
                    j++;
                    k--;
                }
            }
        }
        return ans;
    }



}
